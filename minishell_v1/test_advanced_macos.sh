#!/bin/bash

# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç–µ—Ä –¥–ª—è macOS
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ./test_advanced_macos.sh

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m'

MINISHELL="./minishell"
MINISHELL_PATH=$(pwd)
TEST_DIR="/tmp/minishell_tests_$$"
PASSED=0
FAILED=0

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è timeout (–¥–ª—è macOS –Ω—É–∂–µ–Ω gtimeout)
if command -v timeout >/dev/null 2>&1; then
    TIMEOUT_CMD="timeout"
elif command -v gtimeout >/dev/null 2>&1; then
    TIMEOUT_CMD="gtimeout"
else
    TIMEOUT_CMD=""
fi

# –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞
setup() {
    if [ ! -f "Makefile" ]; then
        echo -e "${RED}‚ùå –ó–∞–ø—É—Å—Ç–∏—Ç–µ –≤ –ø–∞–ø–∫–µ —Å minishell${NC}"
        exit 1
    fi
    
    echo -e "${BLUE}üî® –ö–æ–º–ø–∏–ª–∏—Ä—É–µ–º...${NC}"
    make re > /dev/null 2>&1
    
    if [ ! -x "$MINISHELL" ]; then
        echo -e "${RED}‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞—Ç—å minishell${NC}"
        exit 1
    fi
    
    mkdir -p "$TEST_DIR"
}

# –¢–µ—Å—Ç —Å —É—á–µ—Ç–æ–º macOS
test_command() {
    local name="$1"
    local cmd="$2"
    local expected_exit="${3:-0}"
    local timeout_sec="${4:-3}"
    
    echo -n -e "${BLUE}üîç $name:${NC} "
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
    echo -e "$cmd\nexit" > "$TEST_DIR/cmd_input"
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º —Å timeout –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
    cd "$TEST_DIR"
    if [ -n "$TIMEOUT_CMD" ]; then
        $TIMEOUT_CMD ${timeout_sec}s "$MINISHELL_PATH/$MINISHELL" < cmd_input > minishell_out 2>minishell_err
    else
        "$MINISHELL_PATH/$MINISHELL" < cmd_input > minishell_out 2>minishell_err
    fi
    local actual_exit=$?
    cd "$MINISHELL_PATH"
    
    if [ $actual_exit -eq 124 ]; then
        echo -e "${YELLOW}‚è∞ TIMEOUT${NC}"
        FAILED=$((FAILED + 1))
    elif [ $actual_exit -eq $expected_exit ]; then
        echo -e "${GREEN}‚úÖ PASS${NC}"
        PASSED=$((PASSED + 1))
    else
        echo -e "${RED}‚ùå FAIL (exit: $actual_exit ‚â† $expected_exit)${NC}"
        FAILED=$((FAILED + 1))
        head -2 "$TEST_DIR/minishell_err" | sed 's/^/   /'
    fi
    
    rm -f "$TEST_DIR/cmd_input" "$TEST_DIR/minishell_out" "$TEST_DIR/minishell_err"
}

# –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å bash —Å —É—á–µ—Ç–æ–º macOS –ø—É—Ç–µ–π
test_vs_bash() {
    local name="$1"
    local cmd="$2"
    
    echo -n -e "${BLUE}üîç $name:${NC} "
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –≤ bash
    cd "$TEST_DIR"
    echo "$cmd" | bash > bash_out 2>bash_err
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –≤ minishell
    if [ -n "$TIMEOUT_CMD" ]; then
        echo -e "$cmd\nexit" | $TIMEOUT_CMD 3s "$MINISHELL_PATH/$MINISHELL" > mini_out 2>mini_err
    else
        echo -e "$cmd\nexit" | "$MINISHELL_PATH/$MINISHELL" > mini_out 2>mini_err
    fi
    local mini_exit=$?
    cd "$MINISHELL_PATH"
    
    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—É—Ç–∏ –¥–ª—è macOS (—É–±–∏—Ä–∞–µ–º /private)
    sed 's|/private/tmp|/tmp|g' mini_out > mini_out_norm 2>/dev/null || cp mini_out mini_out_norm
    
    if [ $mini_exit -eq 124 ]; then
        echo -e "${YELLOW}‚è∞ TIMEOUT${NC}"
        FAILED=$((FAILED + 1))
    elif diff "$TEST_DIR/bash_out" "$TEST_DIR/mini_out_norm" > /dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ PASS${NC}"
        PASSED=$((PASSED + 1))
    else
        echo -e "${RED}‚ùå FAIL${NC}"
        FAILED=$((FAILED + 1))
        echo -e "   ${YELLOW}Bash:${NC} $(head -1 "$TEST_DIR/bash_out")"
        echo -e "   ${YELLOW}Mini:${NC} $(head -1 "$TEST_DIR/mini_out_norm")"
    fi
    
    rm -f "$TEST_DIR/bash_out" "$TEST_DIR/bash_err" "$TEST_DIR/mini_out" "$TEST_DIR/mini_err" "$TEST_DIR/mini_out_norm"
}

echo -e "${PURPLE}üöÄ macOS —Ç–µ—Å—Ç–µ—Ä minishell${NC}"
echo "===================================="

setup

echo -e "${BLUE}üìã –ë–∞–∑–æ–≤—ã–µ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã${NC}"
test_vs_bash "echo –ø—Ä–æ—Å—Ç–æ–π" "echo hello"
test_vs_bash "echo -n" "echo -n hello"
test_vs_bash "pwd" "pwd"

echo
echo -e "${BLUE}üìã –õ–æ–≥–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è macOS)${NC}"
test_command "–£—Å–ø–µ—à–Ω–∞—è && —É—Å–ø–µ—à–Ω–∞—è" "echo first && echo second"
test_command "–£—Å–ø–µ—à–Ω–∞—è && –Ω–µ—É—Å–ø–µ—à–Ω–∞—è" "echo success && false" 1
test_command "–ù–µ—É—Å–ø–µ—à–Ω–∞—è && —É—Å–ø–µ—à–Ω–∞—è" "false && echo success" 1
test_command "–ù–µ—É—Å–ø–µ—à–Ω–∞—è || —É—Å–ø–µ—à–Ω–∞—è" "false || echo success"
test_command "–£—Å–ø–µ—à–Ω–∞—è || –Ω–µ—É—Å–ø–µ—à–Ω–∞—è" "echo success || false"

echo
echo -e "${BLUE}üìã Heredoc${NC}"
test_command "–ü—Ä–æ—Å—Ç–æ–π heredoc" 'cat << EOF
line1
line2
EOF'

# –û—á–∏—Å—Ç–∫–∞
rm -rf "$TEST_DIR"

echo
echo "===================================="
echo -e "${BLUE}üìä –ò—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:${NC}"
echo -e "${GREEN}‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: $PASSED${NC}"
echo -e "${RED}‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: $FAILED${NC}"

TOTAL=$((PASSED + FAILED))
if [ $TOTAL -gt 0 ]; then
    PERCENTAGE=$((PASSED * 100 / TOTAL))
    echo -e "${BLUE}üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: $PERCENTAGE%${NC}"
fi

if [ $FAILED -eq 0 ]; then
    echo -e "${GREEN}üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã!${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  –ù—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å $FAILED —Ç–µ—Å—Ç(–æ–≤)${NC}"
fi

exit $FAILED