#!/bin/bash

# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —Ç–µ—Å—Ç–µ—Ä –¥–ª—è minishell
# –ü–æ–ª–æ–∂–∏—Ç–µ –≤ –ø–∞–ø–∫—É —Å minishell –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ: ./test_advanced_fixed.sh

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m'

MINISHELL="./minishell"
MINISHELL_PATH=$(pwd)
TEST_DIR="/tmp/minishell_tests_$$"
PASSED=0
FAILED=0

# –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞
setup() {
    if [ ! -f "Makefile" ]; then
        echo -e "${RED}‚ùå –ó–∞–ø—É—Å—Ç–∏—Ç–µ –≤ –ø–∞–ø–∫–µ —Å minishell${NC}"
        exit 1
    fi
    
    echo -e "${BLUE}üî® –ö–æ–º–ø–∏–ª–∏—Ä—É–µ–º...${NC}"
    make re > /dev/null 2>&1
    
    if [ ! -x "$MINISHELL" ]; then
        echo -e "${RED}‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞—Ç—å minishell${NC}"
        exit 1
    fi
    
    mkdir -p "$TEST_DIR"
}

# –¢–µ—Å—Ç —Å –ø–æ–ª–Ω—ã–º –∫–æ–Ω—Ç—Ä–æ–ª–µ–º
test_command() {
    local name="$1"
    local cmd="$2"
    local expected_exit="${3:-0}"
    local timeout_sec="${4:-3}"
    
    echo -n -e "${BLUE}üîç $name:${NC} "
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –≤ TEST_DIR, –Ω–æ –∑–∞–ø—É—Å–∫–∞–µ–º minishell –∏–∑ MINISHELL_PATH
    echo -e "$cmd\nexit" > "$TEST_DIR/cmd_input"
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º —Å timeout, —É–∫–∞–∑—ã–≤–∞—è –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ minishell
    cd "$TEST_DIR"
    timeout ${timeout_sec}s "$MINISHELL_PATH/$MINISHELL" < cmd_input > minishell_out 2>minishell_err
    local actual_exit=$?
    cd "$MINISHELL_PATH"
    
    if [ $actual_exit -eq 124 ]; then
        echo -e "${YELLOW}‚è∞ TIMEOUT${NC}"
        FAILED=$((FAILED + 1))
    elif [ $actual_exit -eq $expected_exit ]; then
        echo -e "${GREEN}‚úÖ PASS${NC}"
        PASSED=$((PASSED + 1))
    else
        echo -e "${RED}‚ùå FAIL (exit: $actual_exit ‚â† $expected_exit)${NC}"
        FAILED=$((FAILED + 1))
        head -2 "$TEST_DIR/minishell_err" | sed 's/^/   /'
    fi
    
    rm -f "$TEST_DIR/cmd_input" "$TEST_DIR/minishell_out" "$TEST_DIR/minishell_err"
}

# –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å bash
test_vs_bash() {
    local name="$1"
    local cmd="$2"
    
    echo -n -e "${BLUE}üîç $name:${NC} "
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –≤ bash
    cd "$TEST_DIR"
    echo "$cmd" | bash > bash_out 2>bash_err
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –≤ minishell
    echo -e "$cmd\nexit" | timeout 3s "$MINISHELL_PATH/$MINISHELL" > mini_out 2>mini_err
    local mini_exit=$?
    cd "$MINISHELL_PATH"
    
    if [ $mini_exit -eq 124 ]; then
        echo -e "${YELLOW}‚è∞ TIMEOUT${NC}"
        FAILED=$((FAILED + 1))
    elif diff "$TEST_DIR/bash_out" "$TEST_DIR/mini_out" > /dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ PASS${NC}"
        PASSED=$((PASSED + 1))
    else
        echo -e "${RED}‚ùå FAIL${NC}"
        FAILED=$((FAILED + 1))
        echo -e "   ${YELLOW}Bash:${NC} $(head -1 "$TEST_DIR/bash_out")"
        echo -e "   ${YELLOW}Mini:${NC} $(head -1 "$TEST_DIR/mini_out")"
    fi
    
    rm -f "$TEST_DIR/bash_out" "$TEST_DIR/bash_err" "$TEST_DIR/mini_out" "$TEST_DIR/mini_err"
}

echo -e "${PURPLE}üöÄ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç–µ—Ä minishell${NC}"
echo "===================================="

setup

echo -e "${BLUE}üìã –ë–∞–∑–æ–≤—ã–µ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã${NC}"
test_vs_bash "echo –ø—Ä–æ—Å—Ç–æ–π" "echo hello"
test_vs_bash "echo -n" "echo -n hello"
test_vs_bash "echo –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ -n" "echo -nnn hello"
test_vs_bash "pwd" "pwd"

echo
echo -e "${BLUE}üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è–º–∏${NC}"
test_command "cd /tmp" "cd /tmp && pwd"
test_command "cd –¥–æ–º–æ–π" "cd ~ && pwd"
test_command "cd –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è" "cd /nonexistent" 1
test_command "cd —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤" "cd /tmp /usr" 1

echo
echo -e "${BLUE}üìã –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è${NC}"
test_command "export –Ω–æ–≤–∞—è" "export TESTVAR=hello && echo \$TESTVAR"
test_command "export –ø–µ—Ä–µ–∑–∞–ø–∏—Å—å" "export PATH=/test && echo \$PATH"
test_command "export –±–µ–∑ –∑–Ω–∞—á–µ–Ω–∏—è" "export EMPTYVAR && env | grep EMPTYVAR"
test_command "unset —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é" "export TESTVAR2=world && unset TESTVAR2 && echo \$TESTVAR2"
test_command "unset PATH" "unset PATH && echo \$PATH"

echo
echo -e "${BLUE}üìã –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö${NC}"
test_vs_bash "–ü—Ä–æ—Å—Ç–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è" 'export TEST=hello && echo $TEST'
test_vs_bash "Exit status" 'ls /nonexistent 2>/dev/null; echo $?'
test_vs_bash "–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –≤ –∫–∞–≤—ã—á–∫–∞—Ö" 'export TEST=world && echo "hello $TEST"'
test_vs_bash "–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –≤ –æ–¥–∏–Ω–∞—Ä–Ω—ã—Ö –∫–∞–≤—ã—á–∫–∞—Ö" 'export TEST=world && echo '\''$TEST'\'''
test_command "–ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è" 'echo $NONEXISTENT123'

echo
echo -e "${BLUE}üìã –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è${NC}"
echo "test content" > "$TEST_DIR/test_file"
test_command "Redirect input" "cat < test_file"
test_command "Redirect output" "echo test123 > out_file && cat out_file"
test_command "Redirect append" "echo line1 > app_file && echo line2 >> app_file && cat app_file"
test_command "Redirect –∫ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É —Ñ–∞–π–ª—É" "cat < nonexistent" 1

echo
echo -e "${BLUE}üìã Heredoc${NC}"
test_command "–ü—Ä–æ—Å—Ç–æ–π heredoc" 'cat << EOF
line1
line2
EOF'

echo
echo -e "${BLUE}üìã –ö–æ–Ω–≤–µ–π–µ—Ä—ã (pipes)${NC}"
test_vs_bash "–ü—Ä–æ—Å—Ç–æ–π pipe" "echo hello | cat"
test_vs_bash "Pipe —Å wc" "echo -e 'hello\nworld' | wc -l"
test_vs_bash "–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π pipe" "echo hello | cat | cat | wc -c"
test_command "Pipe —Å –Ω–µ–≤–µ—Ä–Ω–æ–π –∫–æ–º–∞–Ω–¥–æ–π" "echo hello | invalidcommand" 127

echo
echo -e "${BLUE}üìã –õ–æ–≥–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã${NC}"
test_command "–£—Å–ø–µ—à–Ω–∞—è && —É—Å–ø–µ—à–Ω–∞—è" "echo first && echo second"
test_command "–£—Å–ø–µ—à–Ω–∞—è && –Ω–µ—É—Å–ø–µ—à–Ω–∞—è" "echo success && /bin/false" 1
test_command "–ù–µ—É—Å–ø–µ—à–Ω–∞—è && —É—Å–ø–µ—à–Ω–∞—è" "/bin/false && echo success" 1
test_command "–ù–µ—É—Å–ø–µ—à–Ω–∞—è || —É—Å–ø–µ—à–Ω–∞—è" "/bin/false || echo success"
test_command "–£—Å–ø–µ—à–Ω–∞—è || –Ω–µ—É—Å–ø–µ—à–Ω–∞—è" "echo success || /bin/false"

echo
echo -e "${BLUE}üìã –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–æ–º–∞–Ω–¥${NC}"
test_command "–ö–æ–º–∞–Ω–¥—ã —á–µ—Ä–µ–∑ ;" "echo first; echo second"

echo
echo -e "${BLUE}üìã –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–≤—ã—á–µ–∫${NC}"
test_vs_bash "–î–≤–æ–π–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏" 'echo "hello world"'
test_vs_bash "–û–¥–∏–Ω–∞—Ä–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏" "echo 'hello world'"
test_vs_bash "–°–º–µ—à–∞–Ω–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏" 'echo "hello'\''world"'
test_vs_bash "–ö–∞–≤—ã—á–∫–∏ —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏" 'export TEST=value && echo "test $TEST"'
test_vs_bash "–û–¥–∏–Ω–∞—Ä–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏ –±–ª–æ–∫–∏—Ä—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ" 'export TEST=value && echo '\''$TEST'\'''

echo
echo -e "${BLUE}üìã –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫${NC}"
test_command "–ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –∫–æ–º–∞–Ω–¥–∞" "nonexistentcommand123" 127
test_command "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å |" "echo hello |" 2
test_command "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å >" "echo hello >" 2
test_command "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å <" "cat <" 2

echo
echo -e "${BLUE}üìã Exit –∫–æ–º–∞–Ω–¥–∞${NC}"
test_command "exit 0" "exit 0" 0
test_command "exit 1" "exit 1" 1
test_command "exit 42" "exit 42" 42
test_command "exit —Å –Ω–µ—á–∏—Å–ª–æ–≤—ã–º –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º" "exit abc" 2

# –û—á–∏—Å—Ç–∫–∞
rm -rf "$TEST_DIR"

echo
echo "===================================="
echo -e "${BLUE}üìä –ò—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:${NC}"
echo -e "${GREEN}‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: $PASSED${NC}"
echo -e "${RED}‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: $FAILED${NC}"

TOTAL=$((PASSED + FAILED))
if [ $TOTAL -gt 0 ]; then
    PERCENTAGE=$((PASSED * 100 / TOTAL))
    echo -e "${BLUE}üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: $PERCENTAGE%${NC}"
fi

if [ $FAILED -eq 0 ]; then
    echo -e "${GREEN}üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã!${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  –ù—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å $FAILED —Ç–µ—Å—Ç(–æ–≤)${NC}"
fi

exit $FAILED